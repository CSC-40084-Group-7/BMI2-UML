@startuml ClassDiagram

skinparam linetype ortho

/'
Glossary

Event: The event that is happening, e.g. App Development in a mobile world.
Delegates: People attending the event, sometimes on behalf of a company.
Exhibitor: A person attending the event on behalf of their company. Each Exhibitor works at one stand.
Moderator: Works in the background during a session filtering the questions sent in by delegates, for the purpose of avoiding anything unsuitable being sent to the speaker, and amalgamating similar questions into one so as to avoid repeating the same question
Session: A talk or presentation happening at the event. Several of these can happen at the same time at larger events and delegates would have to choose which ones they want to attend.  Sometimes these can require a pre-registration of interest to allow entry.
Speaker: An individual presenting the session. These can be the same as exhibitors, or they may be completely independent.
Stand: One per company at the event. These companies are ones that have paid to have a stand at the event.  Often these will be sponsors of the event looking to sell some sort of software or service to the delegates.   Multiple Exhibitors may work on one stand though.
'/

' Entities

class "Event" as event {
    - id: string
    + name: string
    + description: string
    + startdate: date
    + enddate: date
    + location: string
    + maxdelegates: int
}

class "Delegate" as delegate {
    - id: string
    + name: string
    + email: string
    + company: string
    + jobtitle: string
}

class "Exhibitor" as exhibitor {
    - id: string
    + name: string
    + email: string
    + company: string
}

class "Moderator" as moderator {
    - id: string
    + name: string
    + email: string
}

class "Session" as session {
    - id: string
    + name: string
    + description: string
    + startdate: date
    + enddate: date
    + maxdelegates: int
    + location: string
}

class "Speaker" as speaker {
    - id: string
    + name: string
}

class "Stand" as stand {
    - id: string
    + name: string
    + description: string
    + location: string
}

class "Company" as company {
    - id: string
    + name: string
    + description: string
    + website: string
}

class "SessionRegistration" as sessionregistration {
    - id: string
    - sessionid: string
    - delegateid: string
}

class "StandInteraction" as standinteraction {
    - id: string
    - standid: string
    - delegateid: string
    + notes: string
}

class "SessionInteraction" as sessioninteraction {
    - id: string
    - sessionid: string
    - delegateid: string
    + question: string
}

class "DelegateRegistration" as delegateregistration {
    - id: string
    - delegateid: string
    - eventid: string
}

class "CompanyRegistration" as companyregistration {
    - id: string
    - companyid: string
    - eventid: string
}

class "SessionSpeaker" as sessionspeaker {
    - id: string
    - sessionid: string
    - speakerid: string
}

class "SessionQuestion" as sessionquestion {
    - id: string
    - delegateid: string
    - sessionid: string
    + question: string
}

class "SessionAnswer" as sessionanswer {
    - id: string
    - speakerid: string
    - sessionid: string
    - sessionquestionid: string
    + answer: string
}

class "ModerationResponse" as moderationresponse {
    - id: string
    - moderatorid: string
    - sessionquestionid: string
    + action: string
    + comment: string
}

class "Meeting" as meeting {
    - id: string
    - organiserid: string
    + startdate: date
    + enddate: date
    + location: string
}

class "MeetingRequest" as meetingrequest {
    - id: string
    - organiserid: string
    - attendeeid: string
    + startdate: date
    + enddate: date
    + location: string
}

class "MeetingResponse" as meetingresponse {
    - id: string
    - meetingrequestid: string
    - attendeeid: string
    + response: string
}

class "Poll" as poll {
    - id: string
    - sessionid: string
}

class "PollQuestion" as pollquestion {
    - id: string
    - pollid: string
    + question: string
}

class "PollAnswer" as pollanswer {
    - id: string
    - pollquestionid: string
    + answer: string
}

class "PollResult" as pollresult {
    - id: string
    - pollid: string
    - pollquestionid: string
    + count: int
}

' Relationships

event "1..n" -- "1..n" delegate
(event, delegate) .. delegateregistration

event "1..n" -- "1..n" company
(event, company) .. companyregistration
company "1" -- "1" stand
event "1" -- "1..n" stand
exhibitor "1..n" -- "1" company

event "1" -- "1..n" session
session "1..n" -- "1..n" speaker
(session, speaker) .. sessionspeaker
delegate "0..n" -- "0..n" session
(delegate, session) .. sessionregistration

delegate "0..n" -- "0..n" sessionquestion
(delegate, sessionquestion) .. sessioninteraction
moderator "1" -- "0..n" moderationresponse
sessionquestion "1" -- "1" moderationresponse
sessionquestion "1" -- "1" sessionanswer

delegate "0..n" -- "0..n" stand
(delegate, stand) .. standinteraction

delegate "0..n" -- "0..n" meeting
(delegate, meeting) .. meetingrequest
(delegate, meeting) .. meetingresponse

poll "1" -- "0..n" session
poll "1" -- "1..n" pollquestion
delegate "1" -- "0..n" pollanswer
poll "1" -- "1..n" pollresult
pollquestion "1" -- "1..n" pollanswer

together {
    class poll
    class pollquestion
    class pollanswer
    class pollresult
}

together {
    class exhibitor
    class company
    class stand
    class standinteraction
}

together {
    class session
    class speaker
    class sessionspeaker
    class sessionquestion
    class sessionanswer
}

together {
    class meeting
    class meetingrequest
    class meetingresponse
}

@enduml